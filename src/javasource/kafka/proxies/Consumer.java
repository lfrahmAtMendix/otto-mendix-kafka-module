// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package kafka.proxies;

public class Consumer
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject consumerMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "Kafka.Consumer";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Enabled("Enabled"),
		Reference("Reference"),
		Name("Name"),
		CommitControl("CommitControl"),
		ConsumersPerInstance("ConsumersPerInstance"),
		Topics("Topics"),
		OnReceiveMicroflow("OnReceiveMicroflow"),
		ValueType("ValueType"),
		Consumer_ConsumerConfig("Kafka.Consumer_ConsumerConfig"),
		Consumer_Server("Kafka.Consumer_Server"),
		Consumer_Microflows("Kafka.Consumer_Microflows");

		private final java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public Consumer(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, entityName));
	}

	protected Consumer(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject consumerMendixObject)
	{
		if (consumerMendixObject == null) {
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		}
		if (!com.mendix.core.Core.isSubClassOf(entityName, consumerMendixObject.getType())) {
			throw new java.lang.IllegalArgumentException(String.format("The given object is not a %s", entityName));
		}	

		this.consumerMendixObject = consumerMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'Consumer.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static kafka.proxies.Consumer initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return kafka.proxies.Consumer.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 * @param context The context to be used
	 * @param mendixObject The Mendix object for the new instance
	 * @return a new instance of this proxy class
	 */
	public static kafka.proxies.Consumer initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new kafka.proxies.Consumer(context, mendixObject);
	}

	public static kafka.proxies.Consumer load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return kafka.proxies.Consumer.initialize(context, mendixObject);
	}

	public static java.util.List<kafka.proxies.Consumer> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		return com.mendix.core.Core.createXPathQuery(String.format("//%1$s%2$s", entityName, xpathConstraint))
			.execute(context)
			.stream()
			.map(obj -> kafka.proxies.Consumer.initialize(context, obj))
			.collect(java.util.stream.Collectors.toList());
	}

	/**
	 * Commit the changes made on this proxy object.
	 * @throws com.mendix.core.CoreException
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 * @throws com.mendix.core.CoreException
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Enabled
	 */
	public final java.lang.Boolean getEnabled()
	{
		return getEnabled(getContext());
	}

	/**
	 * @param context
	 * @return value of Enabled
	 */
	public final java.lang.Boolean getEnabled(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.Enabled.toString());
	}

	/**
	 * Set value of Enabled
	 * @param enabled
	 */
	public final void setEnabled(java.lang.Boolean enabled)
	{
		setEnabled(getContext(), enabled);
	}

	/**
	 * Set value of Enabled
	 * @param context
	 * @param enabled
	 */
	public final void setEnabled(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean enabled)
	{
		getMendixObject().setValue(context, MemberNames.Enabled.toString(), enabled);
	}

	/**
	 * @return value of Reference
	 */
	public final java.lang.Long getReference()
	{
		return getReference(getContext());
	}

	/**
	 * @param context
	 * @return value of Reference
	 */
	public final java.lang.Long getReference(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Long) getMendixObject().getValue(context, MemberNames.Reference.toString());
	}

	/**
	 * Set value of Reference
	 * @param reference
	 */
	public final void setReference(java.lang.Long reference)
	{
		setReference(getContext(), reference);
	}

	/**
	 * Set value of Reference
	 * @param context
	 * @param reference
	 */
	public final void setReference(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Long reference)
	{
		getMendixObject().setValue(context, MemberNames.Reference.toString(), reference);
	}

	/**
	 * @return value of Name
	 */
	public final java.lang.String getName()
	{
		return getName(getContext());
	}

	/**
	 * @param context
	 * @return value of Name
	 */
	public final java.lang.String getName(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Name.toString());
	}

	/**
	 * Set value of Name
	 * @param name
	 */
	public final void setName(java.lang.String name)
	{
		setName(getContext(), name);
	}

	/**
	 * Set value of Name
	 * @param context
	 * @param name
	 */
	public final void setName(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String name)
	{
		getMendixObject().setValue(context, MemberNames.Name.toString(), name);
	}

	/**
	 * Set value of CommitControl
	 * @param commitcontrol
	 */
	public final kafka.proxies.CommitControl getCommitControl()
	{
		return getCommitControl(getContext());
	}

	/**
	 * @param context
	 * @return value of CommitControl
	 */
	public final kafka.proxies.CommitControl getCommitControl(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.CommitControl.toString());
		if (obj == null) {
			return null;
		}
		return kafka.proxies.CommitControl.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of CommitControl
	 * @param commitcontrol
	 */
	public final void setCommitControl(kafka.proxies.CommitControl commitcontrol)
	{
		setCommitControl(getContext(), commitcontrol);
	}

	/**
	 * Set value of CommitControl
	 * @param context
	 * @param commitcontrol
	 */
	public final void setCommitControl(com.mendix.systemwideinterfaces.core.IContext context, kafka.proxies.CommitControl commitcontrol)
	{
		if (commitcontrol != null) {
			getMendixObject().setValue(context, MemberNames.CommitControl.toString(), commitcontrol.toString());
		} else {
			getMendixObject().setValue(context, MemberNames.CommitControl.toString(), null);
		}
	}

	/**
	 * @return value of ConsumersPerInstance
	 */
	public final java.lang.Integer getConsumersPerInstance()
	{
		return getConsumersPerInstance(getContext());
	}

	/**
	 * @param context
	 * @return value of ConsumersPerInstance
	 */
	public final java.lang.Integer getConsumersPerInstance(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Integer) getMendixObject().getValue(context, MemberNames.ConsumersPerInstance.toString());
	}

	/**
	 * Set value of ConsumersPerInstance
	 * @param consumersperinstance
	 */
	public final void setConsumersPerInstance(java.lang.Integer consumersperinstance)
	{
		setConsumersPerInstance(getContext(), consumersperinstance);
	}

	/**
	 * Set value of ConsumersPerInstance
	 * @param context
	 * @param consumersperinstance
	 */
	public final void setConsumersPerInstance(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Integer consumersperinstance)
	{
		getMendixObject().setValue(context, MemberNames.ConsumersPerInstance.toString(), consumersperinstance);
	}

	/**
	 * @return value of Topics
	 */
	public final java.lang.String getTopics()
	{
		return getTopics(getContext());
	}

	/**
	 * @param context
	 * @return value of Topics
	 */
	public final java.lang.String getTopics(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Topics.toString());
	}

	/**
	 * Set value of Topics
	 * @param topics
	 */
	public final void setTopics(java.lang.String topics)
	{
		setTopics(getContext(), topics);
	}

	/**
	 * Set value of Topics
	 * @param context
	 * @param topics
	 */
	public final void setTopics(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String topics)
	{
		getMendixObject().setValue(context, MemberNames.Topics.toString(), topics);
	}

	/**
	 * @return value of OnReceiveMicroflow
	 */
	public final java.lang.String getOnReceiveMicroflow()
	{
		return getOnReceiveMicroflow(getContext());
	}

	/**
	 * @param context
	 * @return value of OnReceiveMicroflow
	 */
	public final java.lang.String getOnReceiveMicroflow(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.OnReceiveMicroflow.toString());
	}

	/**
	 * Set value of OnReceiveMicroflow
	 * @param onreceivemicroflow
	 */
	public final void setOnReceiveMicroflow(java.lang.String onreceivemicroflow)
	{
		setOnReceiveMicroflow(getContext(), onreceivemicroflow);
	}

	/**
	 * Set value of OnReceiveMicroflow
	 * @param context
	 * @param onreceivemicroflow
	 */
	public final void setOnReceiveMicroflow(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String onreceivemicroflow)
	{
		getMendixObject().setValue(context, MemberNames.OnReceiveMicroflow.toString(), onreceivemicroflow);
	}

	/**
	 * Set value of ValueType
	 * @param valuetype
	 */
	public final kafka.proxies.ValueType getValueType()
	{
		return getValueType(getContext());
	}

	/**
	 * @param context
	 * @return value of ValueType
	 */
	public final kafka.proxies.ValueType getValueType(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.ValueType.toString());
		if (obj == null) {
			return null;
		}
		return kafka.proxies.ValueType.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of ValueType
	 * @param valuetype
	 */
	public final void setValueType(kafka.proxies.ValueType valuetype)
	{
		setValueType(getContext(), valuetype);
	}

	/**
	 * Set value of ValueType
	 * @param context
	 * @param valuetype
	 */
	public final void setValueType(com.mendix.systemwideinterfaces.core.IContext context, kafka.proxies.ValueType valuetype)
	{
		if (valuetype != null) {
			getMendixObject().setValue(context, MemberNames.ValueType.toString(), valuetype.toString());
		} else {
			getMendixObject().setValue(context, MemberNames.ValueType.toString(), null);
		}
	}

	/**
	 * @throws com.mendix.core.CoreException
	 * @return value of Consumer_ConsumerConfig
	 */
	public final kafka.proxies.ConsumerConfig getConsumer_ConsumerConfig() throws com.mendix.core.CoreException
	{
		return getConsumer_ConsumerConfig(getContext());
	}

	/**
	 * @param context
	 * @return value of Consumer_ConsumerConfig
	 * @throws com.mendix.core.CoreException
	 */
	public final kafka.proxies.ConsumerConfig getConsumer_ConsumerConfig(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		kafka.proxies.ConsumerConfig result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Consumer_ConsumerConfig.toString());
		if (identifier != null) {
			result = kafka.proxies.ConsumerConfig.load(context, identifier);
		}
		return result;
	}

	/**
	 * Set value of Consumer_ConsumerConfig
	 * @param consumer_consumerconfig
	 */
	public final void setConsumer_ConsumerConfig(kafka.proxies.ConsumerConfig consumer_consumerconfig)
	{
		setConsumer_ConsumerConfig(getContext(), consumer_consumerconfig);
	}

	/**
	 * Set value of Consumer_ConsumerConfig
	 * @param context
	 * @param consumer_consumerconfig
	 */
	public final void setConsumer_ConsumerConfig(com.mendix.systemwideinterfaces.core.IContext context, kafka.proxies.ConsumerConfig consumer_consumerconfig)
	{
		if (consumer_consumerconfig == null) {
			getMendixObject().setValue(context, MemberNames.Consumer_ConsumerConfig.toString(), null);
		} else {
			getMendixObject().setValue(context, MemberNames.Consumer_ConsumerConfig.toString(), consumer_consumerconfig.getMendixObject().getId());
		}
	}

	/**
	 * @throws com.mendix.core.CoreException
	 * @return value of Consumer_Server
	 */
	public final kafka.proxies.Server getConsumer_Server() throws com.mendix.core.CoreException
	{
		return getConsumer_Server(getContext());
	}

	/**
	 * @param context
	 * @return value of Consumer_Server
	 * @throws com.mendix.core.CoreException
	 */
	public final kafka.proxies.Server getConsumer_Server(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		kafka.proxies.Server result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Consumer_Server.toString());
		if (identifier != null) {
			result = kafka.proxies.Server.load(context, identifier);
		}
		return result;
	}

	/**
	 * Set value of Consumer_Server
	 * @param consumer_server
	 */
	public final void setConsumer_Server(kafka.proxies.Server consumer_server)
	{
		setConsumer_Server(getContext(), consumer_server);
	}

	/**
	 * Set value of Consumer_Server
	 * @param context
	 * @param consumer_server
	 */
	public final void setConsumer_Server(com.mendix.systemwideinterfaces.core.IContext context, kafka.proxies.Server consumer_server)
	{
		if (consumer_server == null) {
			getMendixObject().setValue(context, MemberNames.Consumer_Server.toString(), null);
		} else {
			getMendixObject().setValue(context, MemberNames.Consumer_Server.toString(), consumer_server.getMendixObject().getId());
		}
	}

	/**
	 * @throws com.mendix.core.CoreException
	 * @return value of Consumer_Microflows
	 */
	public final mxmodelreflection.proxies.Microflows getConsumer_Microflows() throws com.mendix.core.CoreException
	{
		return getConsumer_Microflows(getContext());
	}

	/**
	 * @param context
	 * @return value of Consumer_Microflows
	 * @throws com.mendix.core.CoreException
	 */
	public final mxmodelreflection.proxies.Microflows getConsumer_Microflows(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		mxmodelreflection.proxies.Microflows result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Consumer_Microflows.toString());
		if (identifier != null) {
			result = mxmodelreflection.proxies.Microflows.load(context, identifier);
		}
		return result;
	}

	/**
	 * Set value of Consumer_Microflows
	 * @param consumer_microflows
	 */
	public final void setConsumer_Microflows(mxmodelreflection.proxies.Microflows consumer_microflows)
	{
		setConsumer_Microflows(getContext(), consumer_microflows);
	}

	/**
	 * Set value of Consumer_Microflows
	 * @param context
	 * @param consumer_microflows
	 */
	public final void setConsumer_Microflows(com.mendix.systemwideinterfaces.core.IContext context, mxmodelreflection.proxies.Microflows consumer_microflows)
	{
		if (consumer_microflows == null) {
			getMendixObject().setValue(context, MemberNames.Consumer_Microflows.toString(), null);
		} else {
			getMendixObject().setValue(context, MemberNames.Consumer_Microflows.toString(), consumer_microflows.getMendixObject().getId());
		}
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return consumerMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this) {
			return true;
		}
		if (obj != null && getClass().equals(obj.getClass()))
		{
			final kafka.proxies.Consumer that = (kafka.proxies.Consumer) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return entityName;
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
